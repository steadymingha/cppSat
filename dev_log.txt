astro_definition.cpp
AstroEnvSetup 생성자 부분(l8~9) :
//TimeConverter& 타입의 객체를 astro_time으로 외부에서 받아서 astro_time_ 멤버변수로 초기화 시키고 AstroTime()로 get 하기

240403
const char* integrator_name[] = { "ADAMS-MOULTON", "RUNGE-KUTTA-78", "RUNGE-KUTTA-45", "RUNGE-KUTTA-4" };
constexpr와 포인터: constexpr는 컴파일 시간에 그 값이 결정되어야 하는 상수 표현식에 사용됩니다.
포인터 자체를 constexpr로 선언하는 것은 가능하지만, 포인터가 가리키는 대상이 컴파일 시간에 알려져 있고 변경되지 않아야 한다는 의미입니다.
 문자열 리터럴("ADAMS-MOULTON" 등)은 프로그램의 실행 파일에 저장되며, 그 위치는 실행 시간까지 정확히 알 수 없습니다.
 따라서, 문자열 리터럴의 주소를 컴파일 시간 상수로 처리할 수 없습니다.
문자열 리터럴의 타입: C++에서 문자열 리터럴은 const char[] 타입입니다. 이는 문자열 리터럴이 읽기 전용 메모리에 저장되며 변경할 수 없다는 것을 의미합니다. 따라서, 문자열 리터럴에 대한 포인터는 const char* 타입이어야 합니다.
위의 문제를 해결하기 위해, 문자열 배열을 constexpr로 선언하고 싶다면, 문자열 리터럴에 대한 포인터를 const char*로 선언해야 합니다. 그리고 C++14부터는 constexpr가 더 유연해져서, 복잡한 표현식과 일부 타입의 객체 생성을 허용하지만, 포인터의 경우는 여전히 제한적입니다.

constexpr const char* integrator_name[] = { "ADAMS-MOULTON", "RUNGE-KUTTA-78", "RUNGE-KUTTA-45", "RUNGE-KUTTA-4" };
이렇게 수정하면, 각 요소가 const char* 타입의 포인터로서 문자열 리터럴을 안전하게 가리키게 됩니다. 이 배열은 컴파일 시간에 그 주소가 결정되진 않지만, 포인터가 가리키는 문자열 리터럴은 컴파일 시간에 결정되고 변경되지 않는 값입니다. 따라서 constexpr를 사용하여 이러한 배열을 정의할 수 있습니다.


header에 변수 정의하면 multi definition 으로 갈수있음 ㅠㅠ 헤더는 보통 여러번 불리니까



parser.cpp에 예외처리 구리니까 추가